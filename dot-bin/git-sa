#!/bin/bash -e
#
# Inspired from 'forgit' (https://github.com/wfxr/forgit)
#
# Functions:
# 1. Show and fuzzy search files waiting for 'git add'
# 2. Multi-selection by 'tab'
# 3. 'enter' to show 'git diff' of tracked files
# 4. 'ctrl-a' to 'git add' selected files
# -- Louis 2024/0430

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# This function reads from standard input
function gitstatusOutput() {
	local _color=""

	git status --short | while IFS= read -r line; do
		local _status=$(echo "${line}" | awk '{print substr($0, 1, 2)}') # Extract the status
		# local _file_path=$(echo "${line}" | awk '{$1=""; print $0}' | sed 's/^ *//g') # Extract file path and remove leading spaces
		# Extract file path and remove leading spaces/surrounding quotes
		local _file_path=$(echo "${line}" | awk '{$1=""; print substr($0, 2)}' | sed -E 's/^"(.*)"$/\1/')

		case "${_status}" in # Apply color based on the status
		" D")
			_color=$RED
			echo -e "[${_color}${_status}${NC}] ${_file_path}"
			;;
		" M" | " m" | " R" | " C")
			_color=$YELLOW
			echo -e "[${_color}${_status}${NC}] ${_file_path}"
			;;
		"??")
			_color=$BLUE
			echo -e "[${_color}${_status}${NC}] ${_file_path}"
			;;
		*)
			# Not scenario for 'git add'
			_color=$NC
			;;
		esac

	done
}

# Define the width of terminal (w/ or w/o Tmux)
if [ -z "$TMUX" ]; then
	COLS=$(tput cols)
else
	COLS=$(tmux display-message -p '#{window_width}')
fi

# TODO
# If these 2 configs are setup together:
# 1. --bind 'ctrl-t:execute-silent(f())'
# 2. --expect=ctrl-t
# Ctrl-t would only quit without exectuing 'f()', even though ChatGPT said it works...
# Workaround
# 1. Save returned value into an array
# 2. Check if the 1st element equals to ctrl-t
# -- Louis 2024/0504

if git rev-parse --git-dir >/dev/null 2>&1; then

	# Ensure something to track
	statusLine=$(gitstatusOutput)

	if [ $(echo -e "${statusLine}" | wc -l) == 0 ]; then
		echo -e "${GREEN}No file found for check-in...${NC}"
		exit 0
	fi

	#	TODO
	# Find a solution to fix
	# 1. Wrapping up parameters as a variable to feed 'fzf' doesn't work
	# 2. 'git show -pretty=format:' setup doesn't work in the f() in fzf preview
	if [ "${COLS}" -ge 160 ]; then
		# Popup tmux window and delta side by side
		gitStatus=$(echo -e "${statusLine}" |
			fzf --tmux=center,80%,85% \
				--ansi --no-sort \
				--header "Enter to view diff, Tab to select, C-a to add" \
				--cycle \
				--multi \
				--print0 \
				--preview-window=down,70% \
				--preview='f() { local _a=$(echo -e "${@}" | sed "s/.*\] //"); [ $# -eq 0 ] || if [ -e "${_a}" ]; then git diff --color=always "${_a}" | delta --side-by-side -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}; fi }; f {}' \
				--bind "ctrl-h:preview-page-down,ctrl-l:preview-page-up" \
				--bind "ctrl-f:page-down,ctrl-b:page-up" \
				--expect="ctrl-a")
	else
		# No popup window and no delta side by side
		gitStatus=$(echo -e "${statusLine}" |
			fzf \
				--ansi --no-sort \
				--header "Enter to view diff, Tab to select, C-a to add" \
				--cycle \
				--wrap \
				--multi \
				--print0 \
				--preview-window=down,70% \
				--preview='f() { local _a=$(echo -e "${@}" | sed "s/.*\] //"); [ $# -eq 0 ] || if [ -e "${_a}" ]; then git diff --color=always "${_a}" | delta; fi }; f {}' \
				--bind "ctrl-h:preview-page-down,ctrl-l:preview-page-up" \
				--bind "ctrl-f:page-down,ctrl-b:page-up" \
				--expect="ctrl-a")
	fi

	# Check if $gitStatus has anything, if yes
	# Cleansing the lines for 'git add'
	#
	# It's weird that the 'sed' function doesn't work correct when
	# putting it into 'gitStatus'
	temp=$(echo -e "${gitStatus}" | sed -E 's/\[[^]]+\] /;/g')
	gitFiles=()
	IFS=';' read -r -a gitFiles <<<"${temp}"

	if [[ ${gitFiles[0]} =~ "ctrl-a" ]]; then
		unset 'gitFiles[0]'
		git add "${gitFiles[@]}"
		echo -e "\nFile(s) below added and waiting to commit:${YELLOW}"

		for p in "${gitFiles[@]}"; do
			echo "${p}"
		done

	else

		# Remove non-existing files from array
		for p in "${!gitFiles[@]}"; do
			if [ ! -e "${gitFiles[$p]}" ]; then unset 'gitFiles[p]'; fi
		done

		gitFiles=("${gitFiles[@]}")

		if [ ${#gitFiles[@]} -gt 0 ]; then git diff "${gitFiles[@]}"; fi

	fi

else
	echo -e "This is${RED} NOT${NC} a git repository!"
fi
